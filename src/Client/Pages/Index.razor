@page "/"
@using Excubo.Blazor.Canvas
@inject IJSRuntime JsRuntime;

<div id="theCanvas" style="position: fixed; opacity: 1; background-color: white; width: 100%; height: 100%">
    <canvas @ref="normal_canvas" width="600px" height="300px"></canvas>
</div>

@code {
    private ElementReference normal_canvas;

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        if (first_render)
        {
            await using (var ctx2 = await JsRuntime.GetContext2DAsync(normal_canvas))
            {
                await ctx2.FontAsync("48px serif");
                await ctx2.StrokeTextAsync("Excubo.Blazor.Canvas", 0, 150);
            }
        }
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        var ctx2 = await JsRuntime.GetContext2DAsync(normal_canvas);
        await ctx2.ClearRectAsync(0, 0, 300, 400);

        await ctx2.FillRectAsync(10, 50, 300, 100);

        await ctx2.StrokeTextAsync($"time: {timeStamp}", 20, 80);
    }
}